~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Python Programming Learning Notes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Methods
object.method-name(parameters)
Sample: node02.upper()
- Using a method does not change the original object 

# Strings: Indexing & Slicing
- Sequence data types (like strings and lists) support indexing & slicing
- Indexing
  Retrive a single element from a sequence data type
  Format: VAR[#]

- Slicing
  Retrive a series of elements from a sequence data type
  Format: VAR[start:end:increment]
  Display VAR in reverse: VAR[::-1]

# Formatting
- Using keyword arguments with the print() function
  end=''
  sep=''
- Sample for sep=''
  print("IP", "address", "is", "1.2.3.4", sep="***")

- Conversion specifiers
  print("Your %s address is: %s and there are %d toal IPs in use" % ("IP", "1.2.3.4", 99))

- The format() method
  print('{0} {1} {2}'.format('a', 'b', 'c'))
- Allocate spaces to the object (Right justification by default)
  print('{0:5} {1:10} {2:15}'.format('a', 'b', 'c'))
  Left justification 
  print('{0:>5} {1:>10} {2:>15}'.format('a', 'b', 'c'))

- format() method and binary numbers
  '{0:b}'.format(170) - returns string '10101010'
- pad the beginning
  '{0:08b}'.format(17)
- Sample for printing binary address
  print('The IPv4 address {0} in dotted binary notation is {1:08b}.{2:08b}.{3:08b}.{4:08b}'.format('1.1.1.1', 1, 1, 1, 1 ))
  The IPv4 address 1.1.1.1 in dotted binary notation is 00000001.00000001.00000001.00000001

# f-strings
- Python formats the string by replacing the name of any variable in braces with its value.

first_name = "name"
last_name = "surname"
full_name = f"{first_name} {last_name}"
print(full_name.title())

# Add tab to a string
print("\tHello World!")

# New lines
print("Languages:\nPython\nC\nJava")
print("Languages:\n\tPython\n\tC\n\tJava")

# Eliminate whitespaces
text = "whitespace "
text.rstrip() - remove whitespace from right hand side of a string
text.lstrip() - remove whitespace from left hand side of a string
test.strip() - remove whitespace from left and right hand side

- Text is only manipulated temporarily
- Assosicate the stripped value with the variable name, for permanet result
text = text.rstrip()

# Undrscore in Numbers
age = 10_000_000
- use underscores when representing large number for better visibility

# Multiple assignement
a, b, c = 0, 1, 2

# Constants
- use CAPITAL letters to name the variable, that value should not be changed

# Mutable vs. Immutable
- Mutable
  Can be changed in place
  list, dict, set and bytearray

- Immutable
  Cannot be changed in place
  string, int, float, decimal, complex, bool, tuple, range, bytes

# User Input
- input() function
  input("Enter your name: ")
- Return an object of data type string

# Numbers: Binary
- From the integer class
- 0bxxxxx - where 'x' is either a 0 or 1
- Can also use the bin() function to convert an integer to binary format
- The string format() method:
  '{:b}.format(integer)'

# Lists
- In Python, square brackets [] indicate a list
- Individual elements in the list are separated by commas

# Accessing Elements in a List
- To access an element in a list, write the name of the list followed by the index of the item enclosed in square brackets
- By asking for the item at index -1, Python always returns the last item in the list
- Sample code that creates list with FQDNs and attach them to the Palo Alto CLI style command

FQDNS = ["google.com", "bbc.co.uk", "cisco.com"]
palo_alto_obj = f"set address FQDN_{FQDNS[0]} fqdn {FQDNS[0]}"
print(palo_alto_obj)

# Appending Elements to the end of a list
- use method append()
nodes = ["SW1", "SW2", "SW3", "R1", "R2", "R3"]
nodes.append("FG1")
nodes.append("FG2")
nodes.append("PA1")
nodes.append("PA2")
print(nodes)

# Creating empy list and appending with the nodes
nodes2 = []
nodes2.append("SV1")
nodes2.append("SV2")
nodes2.append("SV3")
print(nodes2)

# Insert element into a list
nodes2.insert(0, "SV01")
print(nodes2)

# Removing an item using the del statement
del nodes2[1]
print(nodes2)

# pop() Method
print(nodes2)

popped_nodes = nodes2.pop()
print(nodes2)
print(popped_nodes)

# Remove an item by a value
nodes2.remove("SV1")


